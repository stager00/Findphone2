from picrawler import Picrawler
from robot_hat import TTS, Music
from robot_hat import Ultrasonic
from robot_hat import Pin
import asyncio
from bleak import BleakScanner
import time
from machine import I2C, Pin
import ssd1306

tts = TTS()
music = Music()

crawler = Picrawler() 
sonar = Ultrasonic(Pin("D2"), Pin("D3"))
music.music_set_volume(100)

# Initialize I2C and OLED display
i2c = I2C(scl=Pin(5), sda=Pin(4))
oled_width = 128
oled_height = 64
oled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c)

# Clear the OLED display at startup
oled.fill(0)
oled.show()

alert_distance = 15
speed = 150  # 150% of max speed
phone_mac_address = "DC:C4:9C:77:4E:43"  # Your phone's Bluetooth MAC address
recalibration_interval = 5  # Time in seconds to stop and recalibrate

async def find_phone():
    devices = await BleakScanner.discover()
    for device in devices:
        if device.address == phone_mac_address:
            return True
    return False

def rssi_to_distance(rssi):
    # Convert RSSI to distance (approximation)
    tx_power = -59  # Typical value for Bluetooth
    if rssi == 0:
        return -1.0  # if we cannot determine distance
    ratio = rssi * 1.0 / tx_power
    if ratio < 1.0:
        return ratio ** 10
    else:
        distance = (0.89976) * (ratio ** 7.7095) + 0.111
        return distance

def display_distance(distance):
    oled.fill(0)
    oled.text("Distance to phone:", 0, 0)
    oled.text(f"{distance:.2f} meters", 0, 10)
    oled.show()

async def main():
    start_time = time.time()
    while True:
        phone_found = await find_phone()
        distance = sonar.read()
        print(f"Distance: {distance}, Phone Found: {phone_found}")
        
        if phone_found:
            # Placeholder for RSSI value retrieval
            rssi = -50  # Example RSSI value
            estimated_distance = rssi_to_distance(rssi)
            display_distance(estimated_distance)
            
            if distance < 0:
                pass
            elif distance <= alert_distance:
                try:
                    music.sound_play_threading('./sounds/sign.wav', volume=100)
                except Exception as e:
                    print(e)
                crawler.do_action('turn left angle', 3, speed)
                time.sleep(0.2)
            else:
                crawler.do_action('forward', 1, speed)
                time.sleep(0.2)
        else:
            crawler.do_action('turn left angle', 3, speed)
            time.sleep(0.2)
        
        # Recalibrate direction periodically
        if time.time() - start_time >= recalibration_interval:
            crawler.do_action('stop', 1, speed)
            time.sleep(1)  # Pause for a moment
            start_time = time.time()  # Reset the timer

if __name__ == "__main__":
    asyncio.run(main())
